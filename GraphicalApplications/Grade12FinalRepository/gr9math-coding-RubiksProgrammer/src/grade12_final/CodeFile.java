package grade12_final;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import array.Array;
import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;

public class CodeFile {
	
	private static final String fileName = "src\\grade12_final\\Program.java";
	
	/**
	 * Method Name: testCode
	 * Description: calls the fileMaker method (overwrites a the Program.java file and compiles it), runs the file,
	 * 				reads the output, and returns it in an string array.
	 * Parameters: String code
	 * @returns an object array containing the 2d array of double outputs of program (for each testcase) and an error string.
	 * 			If an error doesn't occur, the error string will be empty.
	 */
	public static Object[] testCode(String code, String[] inNames, double[][] inputs, int testNum) {
		
		//create array to store ouput to display
		double[][] codeOutput = new double[testNum][0];
		
		//create object array to return; stores the code output, output string (error or normal), and number of outputs
		Object[] outputError = {codeOutput, ""};
		
		//write the code file; if throws exception, print message and return immediately. Else, if error present, print compilation error message.
		boolean errorPresent = true;
		try {
			errorPresent = fileMaker(code, inNames);
		}
		catch(IOException e){
			outputError[1] = "ERROR ALERT: File IOException generated by CodeFile.fileMaker method.";
			e.printStackTrace();
			return outputError;
		}
		
		//if there is an error, show compilation error
		if(errorPresent) {
			outputError[1] = "COMPILATION ERROR ALERT: there was a compilation error in your code.";
			return outputError;
		}//end if
		
		//call the program class and read output; use try catch for IOException
		try {
			
			//iterate for each test case
			for(int i = 0; i < inputs.length; i++) {
				
				//create a directory variable and execute the Program.java file
//				File file = new File("C:\\Users\\yashj\\git\\gr9math-coding-RubiksProgrammer\\src\\grade12_final");
//				String file = "C:\\Users\\yashj\\git\\gr9math-coding-RubiksProgrammer\\src\\grade12_final\\Program.java";
				String[] command = {"C:\\Program Files\\Java\\jdk1.8.0_311\\bin\\javac", "-cp", "src", fileName};
				ProcessBuilder pb = new ProcessBuilder(command);
				//pb.directory(new File("c:\\Users\\yashj\\git\\gr9math-coding-RubiksProgrammer\\src"));
//				pb.redirectErrorStream(true);
				Process theProcess = pb.start();//.getRuntime().exec("java ", null, file);
						
				if(theProcess.getErrorStream().read() != -1) {
					print("Compilation Error", theProcess.getErrorStream());
				}
				
				if(theProcess.exitValue() == 0) {
					theProcess = new ProcessBuilder(new String[] {"java", "-cp", "src", "grade12_final.Program"}).start();
					
					//enter any inputs required
					BufferedWriter outStream = new BufferedWriter(new OutputStreamWriter(theProcess.getOutputStream()));
					for(int j = 0; j < inputs[i].length; j++) {
					
						//write the inputs into the stream
						outStream.write(inputs[i][j] + "\n");

					}//end for
					outStream.close();
					
					if(theProcess.getErrorStream().read() != -1) {
						print("Errors", theProcess.getErrorStream());
					}
					else { 
						//read from the standard output of the Program.java program and add lines to codeOutput array and output string
						BufferedReader inStream = new BufferedReader(new InputStreamReader(theProcess.getInputStream()));
						System.out.println("Code output:");
						String line = null;
						while((line = inStream.readLine()) != null) {
							System.out.println(line);
							codeOutput[i] = Array.insertElement(codeOutput[i], Double.parseDouble(line), codeOutput[i].length);	
						}//end while
						inStream.close();
					}
				}
				

			}
		}
		catch (IOException e) {
			
			outputError[1] = "ERROR ALERT: Error occurred while running your program.";
			e.printStackTrace();
			return outputError;
			
		}//end try-catch block
		
		//return codeOutput
		return outputError;
	}//end codeReader method
	
	private static void print(String status, InputStream input) throws IOException {
		//read from the standard output of the Program.java program and add lines to codeOutput array and output string
		BufferedReader inStream = new BufferedReader(new InputStreamReader(input));
		System.out.println("Code output:");
		String line = null;
		while((line = inStream.readLine()) != null) {
			System.out.println(line);
		}//end while
		inStream.close();
	}
	
	/*
	 * Method Name: fileMaker
	 * Description: overwrites Program.java file with user entered code, compiles it, and returns a boolean
	 * 				that informs the coder if there were compilation errors.
	 * Parameters: String code
	 * Returns: boolean errorPresent
	 */
	public static boolean fileMaker(String code, String[] inNames) throws IOException {
		
		//first read code from program layout file and insert inputInit and code into it
		//create file and print writers
		FileReader programStyle = new FileReader("ProgramLayout.txt");
		BufferedReader reader = new BufferedReader(programStyle);
		
		//create vars to store current line and all code
		String allCode = "";
		String line = reader.readLine();
		
		while(line != null) {
			
			//first check if it is the code or inputInit comment
			String noSpaceLine = line.replaceAll("\\s+", "");
			if(noSpaceLine.equals("//code")) {
				allCode += code;
			}
			else if(noSpaceLine.equals("//inputInit")) {
				
				for(String name: inNames) {
					allCode += "double " + name + " = myInput.nextDouble();\n";
				}
			}
			else {
				allCode += line + "\n";
			}
	
			line = reader.readLine();
		}
		reader.close();
		
		//create boolean to return
		boolean errorPresent = true;
		
		//open Program.java and the filewriter and printwriter, and write all code
		File program = new File("C:\\Users\\yashj\\git\\gr9math-coding-RubiksProgrammer\\src\\grade12_final\\Program.java");
		FileWriter fileWriter = new FileWriter(program);
		PrintWriter writer = new PrintWriter(fileWriter);
		writer.println(allCode);
		
		//close the filewriter and printwriter
		writer.close();
		fileWriter.close();
		
		//create outputstream to receive any compilation errors
		OutputStream output = new ByteArrayOutputStream();
		
		//compile the file
		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
		compiler.run(null, null, output, program.getPath());
		
		//if there is no error, return false, otherwise return true
		String error = output.toString();
		if(error.equals("")) {
			errorPresent = false;
		}
		else {
			System.out.println("ERROR ALERT");
			System.out.println(error);
			errorPresent = true;
		}//end if
		
		return errorPresent;

	}//end fileMaker method

}
